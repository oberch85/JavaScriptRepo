// Create one function named as showweatherDetails and inlcude it in weather_report.js file.
// The code prevents the default behavior of an event, such as form submission, within a function named showweatherDetails.

function showweatherDetails(event) {
	event.preventDefault();
	
	/*
	Within showweatherDetails function, initialize three variables for city, apiKey and apiUrl 
	- The code obtains the value entered by the user in the input field labeled 'city'.
	- A URL for the OpenWeatherMap API has been constructed by combining the user-entered city name with a personal API key, essential for accessing weather data. 
	Key has already been created for you. You can directly use this key.
	-  Note: You will use your own API key which has been generated by you in the first step of Setting up the environment.
	- This code has variable name apiUrl which will contain the same URl which you will instructed to save for further use in the first step of Setting up the environment.
	*/
	const city = document.getElementById('city').value;
	const apiKey = '633d7cc89816f094878a773019c71542'; // Replace 'YOUR_API_KEY' with your actual API key
	const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;
	
	/*
	Use fetch api method to fetch details related to city which user will enter in the input box provided in the HTMl file. 
	Include the code inside the showweatherDetails function below variables initialization.
	- The function fetch initiates an asynchronous HTTP request to the specified apiUrl (OpenWeatherMap API) to retrieve weather data.
	- Response handling is being utilized by promise with .then() to process the response by first converting it to JSON format response.json(), 
	and then accessing the resulting data.
	- HTMl file is also being Updated the HTML content dynamically by selecting the 'weatherInfo' element, 
	populating it with structured weather information such as city name data.name, temperature data.main.temp, 
	and weather description data.weather[0].description, ensuring a user-readable display of fetched weather details on the webpage.
	*/
	fetch(apiUrl)
		.then(response => response.json())
		.then(data => {
			const weatherInfo = document.getElementById('weatherInfo');
			weatherInfo.innerHTML = `<h2>Weather in ${data.name}</h2>
									<p>Temperature: ${data.main.temp} &#8451;</p>
									<p>Weather: ${data.weather[0].description}</p>`;
		})
}


/*
Then include below give code outside the function. It attaches an event listener to the 'weatherForm' element, listening for a 'submit' event and triggering the showweatherDetails function upon form submission, 
enabling customized handling or manipulation of the form's behavior.
*/
document.getElementById('weatherForm').addEventListener('submit',showweatherDetails );
